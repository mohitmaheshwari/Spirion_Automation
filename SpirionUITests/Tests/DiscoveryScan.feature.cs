// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpirionUITests.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("DiscoveryScan")]
    public partial class DiscoveryScanFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "DiscoveryScan.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests", "DiscoveryScan", "\tTesting Discovery Scan", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("User is logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan files using Discovery Scan Local Target")]
        [NUnit.Framework.TestCaseAttribute("SDM DS Local Discovery_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\DiscoveryScan", "TestData\\DiscoveryScan", null)]
        public virtual void GivenUserIsTryingToScanFilesUsingDiscoveryScanLocalTarget(string scanName, string scanDescription, string scanType, string scanTargetType, string scanLocationType, string folderPath, string testFile, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan files using Discovery Scan Local Target", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 8
 testRunner.Then("Create directory on Local machine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
 testRunner.Given(string.Format("User is preparing testData for DiscoveryScan from \'{0}\' for \'{1}\'  and uploading " +
                            "to \'{2}\'", testFile, scanTargetType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.Then(string.Format("User creates a new Discovery scan with \'{0}\', \'{1}\', \'{2}\',\'{3}\', \'{4}\', \'{5}\'", scanName, scanDescription, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.And("Open Search Scan Results and verify all files are discovered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan files using Discovery Scan Remote Target")]
        [NUnit.Framework.TestCaseAttribute("SDM DS Remote Discovery_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\DiscoveryScan", "TestData\\DiscoveryScan", null)]
        public virtual void GivenUserIsTryingToScanFilesUsingDiscoveryScanRemoteTarget(string scanName, string scanDescription, string scanType, string scanTargetType, string scanLocationType, string folderPath, string testFile, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan files using Discovery Scan Remote Target", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 21
 testRunner.Then("Create directory on Remote machine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.Given(string.Format("User is preparing testData for DiscoveryScan from \'{0}\' for \'{1}\'  and uploading " +
                            "to \'{2}\'", testFile, scanTargetType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 23
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "TargetName",
                            "TargetType",
                            "AddressType"});
                table1.AddRow(new string[] {
                            "Remote Target_Automation",
                            "Remote",
                            "IP Address"});
#line 24
 testRunner.Then("User add a new remote target agent", ((string)(null)), table1, "Then ");
#line hidden
#line 27
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.Then(string.Format("User creates a new Discovery scan with \'{0}\', \'{1}\', \'{2}\',\'{3}\', \'{4}\', \'{5}\'", scanName, scanDescription, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.And("Open Search Scan Results and verify all files are discovered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
