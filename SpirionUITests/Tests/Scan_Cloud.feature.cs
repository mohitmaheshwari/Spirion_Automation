// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpirionUITests.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Scan_Cloud")]
    public partial class Scan_CloudFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Scan_Cloud.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests", "Scan_Cloud", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line hidden
#line 4
 testRunner.Given("User is logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 5
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "TargetName",
                        "TargetType"});
            table2.AddRow(new string[] {
                        "Cloud_dropbox Target_Automation",
                        "Cloud"});
#line 6
 testRunner.Then("User add a New Dropbox Cloud target agent", ((string)(null)), table2, "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Dropbox")]
        [NUnit.Framework.TestCaseAttribute("CloudDropBox_AUID", "Do not delete or update this PlayBook", "Take No Action", "Classification", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD CloudDropbox_AUID:", "This scan is developed by automation", "Cloud;Dropbox", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\AssignRole", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForDropbox(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Dropbox", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 3
this.FeatureBackground();
#line hidden
#line 11
 testRunner.Given(string.Format("User is preparing testData for Dropbox \'SocialSecurityNumber\' from \'{0}\'  and upl" +
                            "oading to \'{1}\', \'true\'", testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 12
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.And(string.Format("Open Search Scan Results and verify all details for Multiple Classification \'{0}\'" +
                            "", rightDecision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
