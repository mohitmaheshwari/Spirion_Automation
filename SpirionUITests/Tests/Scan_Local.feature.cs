// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpirionUITests.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ScanTest_Local")]
    public partial class ScanTest_LocalFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Scan_Local.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests", "ScanTest_Local", "\tTests containing all scanning on Local", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Given("User is logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.Then("Create directory on Local machine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan Single SSN File")]
        [NUnit.Framework.TestCaseAttribute("SSN Shred_AUID", "Do not delete or update this PlayBook", "User Action", "Shred", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local SSN Shred_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\Shred", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSingleSSNFile(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan Single SSN File", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 9
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 11
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 13
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'ScanType\',\'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5" +
                            "}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 14
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 15
 testRunner.And(string.Format("Open Search Scan Results and verify all details \'{0}\'", rightDecision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 16
 testRunner.Then(string.Format("Verify the file is shredded \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan Mut SSN File")]
        [NUnit.Framework.TestCaseAttribute("Mutiple Classify_AUID", "Do not delete or update this PlayBook", "Take No Action", "Classification", "Automation Logic", "Data Types", "Contains", "Social Security Number;Telephone Number;Credit Card Number", "SDM SD Local Mutiple Classify_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\ClassifyMultipleDataType", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanMutSSNFile(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan Mut SSN File", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 22
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 23
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'CreditCardNumber\' from \'{1}\'  and upload" +
                            "ing to \'{2}\', \'false\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 25
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'TelephoneNumber\' from \'{1}\'  and uploadi" +
                            "ng to \'{2}\', \'false\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 26
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 28
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 29
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 30
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 31
 testRunner.And(string.Format("Open Search Scan Results and verify all details for Multiple Classification \'{0}\'" +
                            "", rightDecision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Redact resolution")]
        [NUnit.Framework.TestCaseAttribute("Redact_AUID", "Do not delete or update this PlayBook", "Classification", "Redact", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local Redact_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\Redact", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForRedactResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Redact resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 38
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 39
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 40
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 41
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 42
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 43
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.And(string.Format("Open Search Scan Results and verify all details \'{0}\'", rightDecision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 45
 testRunner.Then(string.Format("Verify file is redacted sucessfully \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for quartine resolution")]
        [NUnit.Framework.TestCaseAttribute("Quarantine_AUID", "Do not delete or update this PlayBook", "Classification", "Quarantine", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local Quarantine_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\Quarantine", "TestData\\TestData.csv", "The original file, {0}, contained unsecured, personally identifiable information." +
            "  It has been auto-quarantined (via workflow) to:", null)]
        public virtual void GivenUserIsTryingToScanSSNForQuartineResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string quarantinedFileContent, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            argumentsOfScenario.Add("QuarantinedFileContent", quarantinedFileContent);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for quartine resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 51
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 52
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 53
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 55
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 56
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 57
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 58
 testRunner.And(string.Format("Open Search Scan Results and verify all details \'{0}\'", rightDecision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 59
 testRunner.Then(string.Format("Verify file is quarantined sucessfully \'{0}\' \'{1}\' \'{2}\'", quarantinedFileContent, folderPath, scanTargetType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Execute Script resolution")]
        [NUnit.Framework.TestCaseAttribute("ExecuteScripts_AUID", "Do not delete or update this PlayBook", "Classification", "Execute Script", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local ExecuteScript_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\ExecuteScript", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForExecuteScriptResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Execute Script resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 66
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 67
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "ScriptName",
                            "ScriptDescription",
                            "Path"});
                table3.AddRow(new string[] {
                            "SR_DeleteFile_Automation",
                            "This script is an automation run",
                            "TestData\\DeleteScript.bat"});
#line 68
 testRunner.Then("User uploads script to the repositiory", ((string)(null)), table3, "Then ");
#line hidden
#line 71
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 72
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 74
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 75
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.And("Open Search Scan Results and verify all details \'Script Executed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.Then(string.Format("Verify the file is shredded \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Notify resolution")]
        [NUnit.Framework.TestCaseAttribute("Notify_AUID", "Do not delete or update this PlayBook", "Classification", "Notify", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local Notify_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\ExecuteScript", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForNotifyResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Notify resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 83
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 84
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 85
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "TemplateName",
                            "Subject",
                            "Body"});
                table4.AddRow(new string[] {
                            "CustomNotification_AUID",
                            "CustomNotificationSubject_AUID for verification later",
                            "CustomNotificationBody_AUID for verification later"});
#line 86
 testRunner.Then("User creates a custom notification template", ((string)(null)), table4, "Then ");
#line hidden
#line 89
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 90
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 91
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 92
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 93
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 94
 testRunner.And("Open Search Scan Results and verify all details \'No Action Taken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.Then("User selects to click on Notifications", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 96
 testRunner.Then("Verify User gets the notification once the scan is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
 testRunner.Then("Delete the notification from system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for User Action resolution")]
        [NUnit.Framework.TestCaseAttribute("UserAction_AUID", "Do not delete or update this PlayBook", "Classification", "User Action", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local UserAction_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\UserAction", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForUserActionResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for User Action resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 103
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 104
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 105
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 106
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 107
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 108
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 109
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 110
 testRunner.And("Open Search Scan Results and verify user action details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Assign resolution Role")]
        [NUnit.Framework.TestCaseAttribute("AssignRole_AUID", "Do not delete or update this PlayBook", "Classification", "Assign_Role", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local AssignRole_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\AssignRole", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForAssignResolutionRole(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Assign resolution Role", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 116
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 117
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 118
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 119
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 120
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 121
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 123
 testRunner.And("Open Search Scan Results and verify assign details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Assign resolution User")]
        [NUnit.Framework.TestCaseAttribute("AssignUser_AUID", "Do not delete or update this PlayBook", "Classification", "Assign_User", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local AssignUser_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\AssignUser", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForAssignResolutionUser(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Assign resolution User", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 129
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 130
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 131
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 132
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 133
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 134
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 135
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 136
 testRunner.And("Open Search Scan Results and verify assign details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Take No Action resolution")]
        [NUnit.Framework.TestCaseAttribute("TakeNoAction_AUID", "Do not delete or update this PlayBook", "Classification", "Take No Action", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local TakeNoAction_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\TakeNoAction", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForTakeNoActionResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Take No Action resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 142
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 143
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 144
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 145
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 146
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 147
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 148
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 149
 testRunner.And("Open Search Scan Results and verify all details \'No Action Taken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Ignore resolution")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.TestCaseAttribute("Ignore_AUID", "Do not delete or update this PlayBook", "Classification", "Ignore", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local Ignore_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\Ignore", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForIgnoreResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Ignore resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 157
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 158
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 160
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 161
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 162
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 163
 testRunner.And(string.Format("Open Search Scan Results and verify all details \'{0}\'", rightDecision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to test Restrict Access Scan Functionality for administrator" +
            "")]
        [NUnit.Framework.TestCaseAttribute("RestrictAccess_Admin_AUID", "Do not delete or update this PlayBook", "Classification", "Restrict Access_Administrator", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local RestrictAccess_Admin_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\RestrictAccessOnlyFileAdmministrator", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToTestRestrictAccessScanFunctionalityForAdministrator(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to test Restrict Access Scan Functionality for administrator" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 169
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 170
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 171
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 172
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 173
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 174
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 175
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 176
 testRunner.And("Open Search Scan Results and verify all details \'Access Restricted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
 testRunner.Then(string.Format("Administrator is able to access the file \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 178
 testRunner.Then(string.Format("Login as RestrictedUser and file should not be accessible \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to test Restrict Access Scan Functionality for file owner ad" +
            "ministrator")]
        [NUnit.Framework.TestCaseAttribute("RestrictAccess_FileOwner_AUID", "Do not delete or update this PlayBook", "Classification", "Restrict Access_FileOwner", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local RA_FileOwner_Admin_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\RestrictAccessOnlyFileAdmministrator", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToTestRestrictAccessScanFunctionalityForFileOwnerAdministrator(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to test Restrict Access Scan Functionality for file owner ad" +
                    "ministrator", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 184
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 185
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 186
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 187
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 188
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 189
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 190
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 191
 testRunner.And("Open Search Scan Results and verify all details \'Access Restricted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
 testRunner.Then(string.Format("Administrator is able to access the file \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 193
 testRunner.Then(string.Format("Login as RestrictedUser and file should not be accessible \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to test Restrict Access Scan Functionality for file owner re" +
            "stricted user")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.TestCaseAttribute("RestrictAccess_FileOwner_AUID", "Do not delete or update this PlayBook", "Classification", "Restrict Access_FileOwner", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Local RA_FileOwner_RU_AUID:", "This scan is developed by automation", "Files & Folders", "Local Target", "Custom Folder List", "\\SensitiveDataScan\\RestrictAccessOnlyFileOwner", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToTestRestrictAccessScanFunctionalityForFileOwnerRestrictedUser(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to test Restrict Access Scan Functionality for file owner re" +
                    "stricted user", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 201
 testRunner.Given(string.Format("Restricted User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{" +
                            "1}\'  and uploading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 202
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 203
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 204
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 205
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 206
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 207
 testRunner.And("Open Search Scan Results and verify all details \'Access Restricted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
 testRunner.Then(string.Format("Administrator is not able to access the file \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 209
 testRunner.Then(string.Format("Login as RestrictedUser and file should be accessible \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
