// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpirionUITests.Tests
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ScanTests_Remote")]
    public partial class ScanTests_RemoteFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Scan_Remote.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests", "ScanTests_Remote", "\tTests containing all scanning on Remote", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
#line 5
 testRunner.Then("Check Remote Machine is running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 6
 testRunner.Then("Create directory on Remote machine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 7
 testRunner.Given("User is logged in", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "TargetName",
                        "TargetType",
                        "AddressType"});
            table5.AddRow(new string[] {
                        "Remote Target_Automation",
                        "Remote",
                        "IP Address"});
#line 9
 testRunner.Then("User add a new remote target agent", ((string)(null)), table5, "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan Single SSN File")]
        [NUnit.Framework.TestCaseAttribute("SSN Shred_AUID", "Do not delete or update this PlayBook", "User Action", "Shred", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote SSN Shred_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\Shred", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSingleSSNFile(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan Single SSN File", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 14
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 15
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 16
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 18
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
 testRunner.And(string.Format("Open Search Scan Results and verify all details \'{0}\'", rightDecision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.Then(string.Format("Verify the file is shredded \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan Mut SSN File")]
        [NUnit.Framework.TestCaseAttribute("Mutiple Classify_AUID", "Do not delete or update this PlayBook", "Take No Action", "Classification", "Automation Logic", "Data Types", "Contains", "Social Security Number;Telephone Number;Credit Card Number", "SDM SD Remote Mutiple Classify_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\ClassifyMultipleDataType", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanMutSSNFile(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan Mut SSN File", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 27
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 28
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 29
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'CreditCardNumber\' from \'{1}\'  and upload" +
                            "ing to \'{2}\', \'false\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'TelephoneNumber\' from \'{1}\'  and uploadi" +
                            "ng to \'{2}\', \'false\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 32
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 34
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 36
 testRunner.And(string.Format("Open Search Scan Results and verify all details for Multiple Classification \'{0}\'" +
                            "", rightDecision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Redact resolution")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.TestCaseAttribute("Redact_AUID", "Do not delete or update this PlayBook", "Classification", "Redact", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote Redact_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\Redact", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForRedactResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Redact resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 44
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 46
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 48
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
 testRunner.And(string.Format("Open Search Scan Results and verify all details \'{0}\'", rightDecision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.Then(string.Format("Verify file is redacted sucessfully \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for quartine resolution")]
        [NUnit.Framework.TestCaseAttribute("Quarantine_AUID", "Do not delete or update this PlayBook", "Classification", "Quarantine", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote Quarantine_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\Quarantine", "TestData\\TestData.csv", "The original file, {0}, contained unsecured, personally identifiable information." +
            "  It has been auto-quarantined (via workflow) to:", null)]
        public virtual void GivenUserIsTryingToScanSSNForQuartineResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string quarantinedFileContent, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            argumentsOfScenario.Add("QuarantinedFileContent", quarantinedFileContent);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for quartine resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 58
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 59
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 60
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 62
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 63
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 64
 testRunner.And(string.Format("Open Search Scan Results and verify all details \'{0}\'", rightDecision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.Then(string.Format("Verify file is quarantined sucessfully \'{0}\' \'{1}\' \'{2}\'", quarantinedFileContent, folderPath, scanTargetType), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Execute Script resolution")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.CategoryAttribute("Bug_AL-12872")]
        [NUnit.Framework.TestCaseAttribute("ExecuteScripts_AUID", "Do not delete or update this PlayBook", "Classification", "Execute Script", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote ExecuteScript_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\ExecuteScript", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForExecuteScriptResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "Bug_AL-12872"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Execute Script resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 72
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 73
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "ScriptName",
                            "ScriptDescription",
                            "Path"});
                table6.AddRow(new string[] {
                            "SR_DeleteFile_Automation",
                            "This script is an automation run",
                            "TestData\\DeleteScript.bat"});
#line 75
 testRunner.Then("User uploads script to the repositiory", ((string)(null)), table6, "Then ");
#line hidden
#line 78
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 79
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 80
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 81
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 83
 testRunner.And("Open Search Scan Results and verify all details \'Script Executed\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 84
 testRunner.Then(string.Format("Verify the file is shredded \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Notify resolution")]
        [NUnit.Framework.TestCaseAttribute("Notify_AUID", "Do not delete or update this PlayBook", "Classification", "Notify", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote Notify_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\ExecuteScript", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForNotifyResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Notify resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 90
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 91
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 92
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "TemplateName",
                            "Subject",
                            "Body"});
                table7.AddRow(new string[] {
                            "CustomNotification_AUID",
                            "CustomNotificationSubject_AUID for verification later",
                            "CustomNotificationBody_AUID for verification later"});
#line 93
 testRunner.Then("User creates a custom notification template", ((string)(null)), table7, "Then ");
#line hidden
#line 96
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 97
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 98
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 99
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 100
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 101
 testRunner.And("Open Search Scan Results and verify all details \'No Action Taken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 102
 testRunner.Then("User selects to click on Notifications", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 103
 testRunner.Then("Verify User gets the notification once the scan is completed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 104
 testRunner.Then("Delete the notification from system", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for User Action resolution")]
        [NUnit.Framework.TestCaseAttribute("UserAction_AUID", "Do not delete or update this PlayBook", "Classification", "User Action", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote UserAction_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\UserAction", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForUserActionResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for User Action resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 110
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 111
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 112
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 113
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 114
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 115
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 116
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 117
 testRunner.And("Open Search Scan Results and verify user action details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Assign resolution Role")]
        [NUnit.Framework.TestCaseAttribute("AssignRole_AUID", "Do not delete or update this PlayBook", "Classification", "Assign_Role", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote AssignRole_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\AssignRole", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForAssignResolutionRole(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Assign resolution Role", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 123
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 124
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 125
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 126
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 127
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 129
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 130
 testRunner.And("Open Search Scan Results and verify assign details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Assign resolution User")]
        [NUnit.Framework.TestCaseAttribute("AssignUser_AUID", "Do not delete or update this PlayBook", "Classification", "Assign_User", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote AssignUser_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\AssignUser", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForAssignResolutionUser(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Assign resolution User", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 136
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 137
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 138
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 139
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 140
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 141
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 142
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 143
 testRunner.And("Open Search Scan Results and verify assign details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Take No Action resolution")]
        [NUnit.Framework.TestCaseAttribute("TakeNoAction_AUID", "Do not delete or update this PlayBook", "Classification", "Take No Action", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote TakeNoAction_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\TakeNoAction", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForTakeNoActionResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Take No Action resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 149
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 150
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 151
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 153
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 154
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 155
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 156
 testRunner.And("Open Search Scan Results and verify all details \'No Action Taken\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to scan SSN for Ignore resolution")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.TestCaseAttribute("Ignore_AUID", "Do not delete or update this PlayBook", "Classification", "Ignore", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote Ignore_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\Ignore", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToScanSSNForIgnoreResolution(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to scan SSN for Ignore resolution", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 163
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 164
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 165
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 166
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 167
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 168
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 169
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 170
 testRunner.And(string.Format("Open Search Scan Results and verify all details \'{0}\'", rightDecision), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to test Restrict Access Scan Functionality for administrator" +
            "")]
        [NUnit.Framework.TestCaseAttribute("RestrictAccess_Admin_AUID", "Do not delete or update this PlayBook", "Classification", "Restrict Access_Administrator", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote RestrictAccess_Admin_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\RestrictAccessOnlyFileAdmministrator", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToTestRestrictAccessScanFunctionalityForAdministrator(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to test Restrict Access Scan Functionality for administrator" +
                    "", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 176
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 177
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 178
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 179
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 180
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 181
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 182
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 183
 testRunner.And("Open Search Scan Results and verify all details \'Access Restricted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 184
 testRunner.Then(string.Format("Administrator is able to access the file \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 185
 testRunner.Then(string.Format("Login as RestrictedUser and file should not be accessible \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to test Restrict Access Scan Functionality for file owner ad" +
            "ministrator")]
        [NUnit.Framework.TestCaseAttribute("RestrictAccess_FileOwner_AUID", "Do not delete or update this PlayBook", "Classification", "Restrict Access_FileOwner", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote RA_FileOwner_Admin_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\RestrictAccessOnlyFileAdmministrator", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToTestRestrictAccessScanFunctionalityForFileOwnerAdministrator(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to test Restrict Access Scan Functionality for file owner ad" +
                    "ministrator", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 191
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 192
 testRunner.Given(string.Format("User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{1}\'  and up" +
                            "loading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 193
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 194
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 195
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 196
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 197
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 198
 testRunner.And("Open Search Scan Results and verify all details \'Access Restricted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
 testRunner.Then(string.Format("Administrator is able to access the file \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 200
 testRunner.Then(string.Format("Login as RestrictedUser and file should not be accessible \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Given User is trying to test Restrict Access Scan Functionality for file owner re" +
            "stricted user")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        [NUnit.Framework.TestCaseAttribute("RestrictAccess_FileOwner_AUID", "Do not delete or update this PlayBook", "Classification", "Restrict Access_FileOwner", "Automation Logic", "Data Types", "Contains", "Social Security Number", "SDM SD Remote RA_FileOwner_RU_AUID:", "This scan is developed by automation", "Files & Folders", "Remote Target", "Custom Folder List", "\\SensitiveDataScan\\RestrictAccessOnlyFileOwner", "TestData\\TestData.csv", null)]
        public virtual void GivenUserIsTryingToTestRestrictAccessScanFunctionalityForFileOwnerRestrictedUser(
                    string playBookName, 
                    string playBookDescription, 
                    string leftDecision, 
                    string rightDecision, 
                    string logicName, 
                    string logicType, 
                    string logicTypeOption, 
                    string scanItem, 
                    string scanName, 
                    string scanDescription, 
                    string scanType, 
                    string scanTargetType, 
                    string scanLocationType, 
                    string folderPath, 
                    string testFile, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("PlayBookName", playBookName);
            argumentsOfScenario.Add("PlayBookDescription", playBookDescription);
            argumentsOfScenario.Add("LeftDecision", leftDecision);
            argumentsOfScenario.Add("RightDecision", rightDecision);
            argumentsOfScenario.Add("LogicName", logicName);
            argumentsOfScenario.Add("LogicType", logicType);
            argumentsOfScenario.Add("LogicTypeOption", logicTypeOption);
            argumentsOfScenario.Add("ScanItem", scanItem);
            argumentsOfScenario.Add("ScanName", scanName);
            argumentsOfScenario.Add("ScanDescription", scanDescription);
            argumentsOfScenario.Add("ScanType", scanType);
            argumentsOfScenario.Add("ScanTargetType", scanTargetType);
            argumentsOfScenario.Add("ScanLocationType", scanLocationType);
            argumentsOfScenario.Add("FolderPath", folderPath);
            argumentsOfScenario.Add("TestFile", testFile);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Given User is trying to test Restrict Access Scan Functionality for file owner re" +
                    "stricted user", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 207
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
#line 208
 testRunner.Given(string.Format("Restricted User is preparing testData at \'{0}\' for \'SocialSecurityNumber\' from \'{" +
                            "1}\'  and uploading to \'{2}\', \'true\'", scanTargetType, testFile, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 209
 testRunner.Then("User is waiting for the dashboard to load", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
 testRunner.Then("User selects to click on new scan", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 211
 testRunner.Then(string.Format("User finds the created playbook or create new one \'{0}\',\'{1}\',\'{2}\', \'{3}\',\'{4}\'," +
                            "\'{5}\' ,\'{6}\' and \'{7}\'", playBookName, playBookDescription, logicName, logicType, logicTypeOption, leftDecision, rightDecision, scanItem), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 212
 testRunner.Then(string.Format("User creates a new SSD scan with \'{0}\', \'{1}\', \'{2}\', \'{3}\',\'{4}\', \'{5}\', \'{6}\'", scanName, scanDescription, playBookName, scanType, scanTargetType, scanLocationType, folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 213
 testRunner.Then("Run the scan and wait for scan to complete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 214
 testRunner.And("Open Search Scan Results and verify all details \'Access Restricted\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 215
 testRunner.Then(string.Format("Administrator is not able to access the file \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 216
 testRunner.Then(string.Format("Login as RestrictedUser and file should be accessible \'{0}\'", folderPath), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
